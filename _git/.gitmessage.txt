[type]: <description>

[optional body]

[optional footer(s)]

# Capitalized, short (50 chars or less) summary
#
# More detailed explanatory text, if necessary.  Wrap it to about 72
# characters or so.  In some contexts, the first line is treated as the
# subject of an email and the rest of the text as the body.  The blank
# line separating the summary from the body is critical (unless you omit
# the body entirely); tools like rebase can get confused if you run the
# two together.
#
# Write your commit message in the imperative: "Fix bug" and not "Fixed bug"
# or "Fixes bug."  This convention matches up with commit messages generated
# by commands like git merge and git revert.
#
# Further paragraphs come after blank lines.
#
# - Bullet points are okay, too
#
# - Typically a hyphen or asterisk is used for the bullet, followed by a
#   single space, with blank lines in between, but conventions vary here
#
# - Use a hanging indent
#
# If you use an issue tracker, add a reference(s) to them at the bottom,
# like so:
#
# Resolves: #123
#
# Specify the type of commit:
#
# feat: The new feature you're adding to a particular application
# fix: A bug fix
# style: Feature and updates related to styling
# refactor: Refactoring a specific section of the codebase
# test: Everything related to testing
# docs: Everything related to documentation
# chore: Regular code maintenance.[ You can also use emojis to represent commit types]
#
# Best practices:
#
# Separate the subject from the body with a blank line
# Your commit message should not contain any whitespace errors
# Remove unnecessary punctuation marks
# Do not end the subject line with a period
# Capitalize the subject line and each paragraph
# Use the imperative mood in the subject line
# Use the body to explain what changes you have made and why you made them.
# Do not assume the reviewer understands what the original problem was, ensure you add it.
# Do not think your code is self-explanatory
# Follow the commit convention defined by your team